const COLOR_RED: i32 = 0;
const COLOR_GREEN: i32 = 1;
const COLOR_BLUE: i32 = 2;
const COLOR_YELLOW: i32 = 3;

const STATUS_PENDING: i32 = 0;
const STATUS_RUNNING: i32 = 1;
const STATUS_SUCCESS: i32 = 2;
const STATUS_FAILED: i32 = 3;

func colorName(color: i32) -> str {
    if (color == COLOR_RED) {
        return "Red";
    }
    if (color == COLOR_GREEN) {
        return "Green";
    }
    if (color == COLOR_BLUE) {
        return "Blue";
    }
    if (color == COLOR_YELLOW) {
        return "Yellow";
    }
    return "Unknown";
}

func statusName(status: i32) -> str {
    if (status == STATUS_PENDING) {
        return "Pending";
    }
    if (status == STATUS_RUNNING) {
        return "Running";
    }
    if (status == STATUS_SUCCESS) {
        return "Success";
    }
    if (status == STATUS_FAILED) {
        return "Failed";
    }
    return "Unknown";
}

func processTask(status: i32) -> void {
    say("Task status:", statusName(status));
    
    if (status == STATUS_SUCCESS) {
        say("Task completed successfully!");
    } else {
        if (status == STATUS_FAILED) {
            say("Task failed!");
        } else {
            say("Task still in progress...");
        }
    }
}

func main() -> i32 {
    say("Enum simulation with constants");
    
    say("\n=== Colors ===");
    let color: i32 = COLOR_RED;
    say("Selected color:", colorName(color));
    
    color = COLOR_GREEN;
    say("Changed to:", colorName(color));
    
    say("\n=== Task Status ===");
    let taskStatus: i32 = STATUS_PENDING;
    processTask(taskStatus);
    
    taskStatus = STATUS_RUNNING;
    processTask(taskStatus);
    
    taskStatus = STATUS_SUCCESS;
    processTask(taskStatus);
    
    return 0;
}

