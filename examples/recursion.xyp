func sum(n: i32) -> i32 {
    if (n <= 0) {
        return 0;
    }
    return n + sum(n - 1);
}

func power(base: i32, exp: i32) -> i32 {
    if (exp == 0) {
        return 1;
    }
    return base * power(base, exp - 1);
}

func ackermann(m: i32, n: i32) -> i32 {
    if (m == 0) {
        return n + 1;
    }
    if (n == 0) {
        return ackermann(m - 1, 1);
    }
    return ackermann(m - 1, ackermann(m, n - 1));
}

func hanoi(n: i32, from: str, to: str, aux: str) -> void {
    if (n == 1) {
        say("Move disk from", from, "to", to);
        return;
    }
    
    hanoi(n - 1, from, aux, to);
    say("Move disk from", from, "to", to);
    hanoi(n - 1, aux, to, from);
}

func binSearch(arr: i32, low: i32, high: i32, target: i32) -> i32 {
    if (high < low) {
        return -1;
    }
    
    let mid: i32 = low + (high - low) / 2;
    
    if (arr == target) {
        return mid;
    }
    
    if (arr > target) {
        return binSearch(arr, low, mid - 1, target);
    }
    
    return binSearch(arr, mid + 1, high, target);
}

func main() -> i32 {
    say("Recursion Examples");
    
    say("\n=== Sum ===");
    say("sum(10) =", sum(10));
    say("sum(100) =", sum(100));
    
    say("\n=== Power ===");
    say("2^5 =", power(2, 5));
    say("3^4 =", power(3, 4));
    
    say("\n=== Ackermann ===");
    say("A(1, 2) =", ackermann(1, 2));
    say("A(2, 2) =", ackermann(2, 2));
    
    say("\n=== Tower of Hanoi ===");
    say("Moving 3 disks:");
    hanoi(3, "A", "C", "B");
    
    return 0;
}

